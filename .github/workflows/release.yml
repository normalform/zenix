name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      assembly-version: ${{ steps.version.outputs.assembly-version }}
      file-version: ${{ steps.version.outputs.file-version }}
      tag-version: ${{ steps.version.outputs.tag-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        MAJOR=$(echo $TAG_VERSION | cut -d. -f1)
        MINOR=$(echo $TAG_VERSION | cut -d. -f2)
        BUILD=$(echo $TAG_VERSION | cut -d. -f3)
        
        VERSION="${MAJOR}.${MINOR}.${BUILD}"
        ASSEMBLY_VERSION="${MAJOR}.${MINOR}.0.0"
        FILE_VERSION="${MAJOR}.${MINOR}.${BUILD}.0"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "assembly-version=${ASSEMBLY_VERSION}" >> $GITHUB_OUTPUT
        echo "file-version=${FILE_VERSION}" >> $GITHUB_OUTPUT
        echo "tag-version=${TAG_VERSION}" >> $GITHUB_OUTPUT
        
        echo "ðŸ“¦ Release Version: ${VERSION}"
        echo "ðŸ”§ Assembly Version: ${ASSEMBLY_VERSION}"
        echo "ðŸ“„ File Version: ${FILE_VERSION}"

  create-release:
    runs-on: ubuntu-latest
    needs: versioning
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.versioning.outputs.version }}
        release_name: Zenix v${{ needs.versioning.outputs.version }}
        body: |
          ## Zenix Release v${{ needs.versioning.outputs.version }}
          
          **Version Information:**
          - ðŸ“¦ Package Version: ${{ needs.versioning.outputs.version }}
          - ðŸ”§ Assembly Version: ${{ needs.versioning.outputs.assembly-version }}
          - ðŸ“„ File Version: ${{ needs.versioning.outputs.file-version }}
          
          **Downloads:**
          - Windows x64: `zenix-win-x64.zip`
          - Linux x64: `zenix-linux-x64.tar.gz`
          - macOS x64: `zenix-macos-x64.tar.gz`
          
          ---
          
          For installation instructions and documentation, please see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
        draft: false
        prerelease: false

  build-and-upload:
    needs: [versioning, create-release]
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: zenix-windows-x64
            file-extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: zenix-linux-x64
            file-extension: ''
          - os: macos-latest
            runtime: osx-x64
            artifact-name: zenix-macos-x64
            file-extension: ''

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build and Test
      run: |
        dotnet build --configuration Release --no-restore -p:Version=${{ needs.versioning.outputs.version }} -p:AssemblyVersion=${{ needs.versioning.outputs.assembly-version }} -p:FileVersion=${{ needs.versioning.outputs.file-version }}
        dotnet test --configuration Release --no-build --verbosity normal

    - name: Publish self-contained
      run: dotnet publish src/Zenix.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/ -p:Version=${{ needs.versioning.outputs.version }} -p:AssemblyVersion=${{ needs.versioning.outputs.assembly-version }} -p:FileVersion=${{ needs.versioning.outputs.file-version }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd publish
        7z a -tzip ../zenix-${{ matrix.runtime }}.zip *

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd publish
        tar -czf ../zenix-${{ matrix.runtime }}.tar.gz *

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./zenix-${{ matrix.runtime }}.zip
        asset_name: zenix-${{ matrix.runtime }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./zenix-${{ matrix.runtime }}.tar.gz
        asset_name: zenix-${{ matrix.runtime }}.tar.gz
        asset_content_type: application/gzip
